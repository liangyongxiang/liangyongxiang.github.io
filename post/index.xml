<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on yongxiang</title><link>https://liangyongxiang.github.io/post/</link><description>Recent content in Posts on yongxiang</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 20 Jan 2022 20:56:56 +0800</lastBuildDate><atom:link href="https://liangyongxiang.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Gentoo Version Bump</title><link>https://liangyongxiang.github.io/p/gentoo-version-bump/</link><pubDate>Thu, 20 Jan 2022 20:56:56 +0800</pubDate><guid>https://liangyongxiang.github.io/p/gentoo-version-bump/</guid><description>前言 在使用Gentoo的时候，经常看到了某个软件的上游发布了新版本，隔壁arch的小伙伴都用上了，但是Gentoo这边还没更新，心痒难耐。 这时候推荐自己亲自动手上，bump(升级)到新的版本真的非常容易。
例如今天有小伙伴说wps都更新到11.1.0.10920了，gentoo-zh这边还是旧的，其实天苯的overlay里面已经有新版了，假装没看到，（逃
我们可以在自己本地的overlay里面bump到新版本之后测试，如果没有问题，就可以向维护者提出bump 请求（gentoo主仓库常见做法），或者自己发pull request到对于的git仓库（overlay常见做法）。
在gentoo主仓库发version bump请求是在 https://bugs.gentoo.org ，所以需要提前注册一个帐号，发version bump的时候还需要避免&amp;quot;Zero day bump request&amp;quot;，具体是至少要等48小时之后才能发bump request，相关Wiki：https://wiki.gentoo.org/wiki/Zero-day_bump_requests。
这是一个version bump的例子: app-editors/le: version bump。
在gentoo-zh，更推荐的方式是直接发version bump的pull request。这个需要提前注册好Github帐号，并且fork gentoo-zh仓库，如果以前已经fork过，不需要额外操作（即不用删除重新fork）
overlay version bump 因为大家添加gentoo-zh overlay的地址不一定一样，有的喜欢直接使用开发的git仓库(https://github.com/microcai/gentoo-zh.git)，有的喜欢使用gentoo-mirror(https://github.com/gentoo-mirror/gentoo-zh.git)的仓库。如果使用的是开发仓库，可以直接在上面修改。如果使用的是gentoo-mirror就建议在自己的本地overlay先bump。
这里我先介绍，如何在自己的本地overlay里version bump并且测试好，然后才在复制commit到 gentoo-zh 仓库，最后提交发pull request。
在自己的overlay里bump测试 步骤：
建立自己的本地overlay（只需一次，以后bump新的包不需要再来一次） 复制已有的ebuild到自己的overly，如果已经有同名的包，建议先删除 bump到新版本，编译安装运行测试 测试通过之后，可以提交修改到gentoo-zh。如果测试没过，直接git还原修改即可 自定义overlay 如果没有自己的本地overlay，可以自定义overlay，官方Wiki介绍在这里：https://wiki.gentoo.org/wiki/Creating_an_ebuild_repository。 特权操作我使用的是doas，可以替换成sudo或者切换到root用户操作。 简单来说就是：
$ doas eselect repository create local # 自定义本地overlay $ cd /var/db/repos/local/ $ doas git init # 使用git管理自己的overlay $ doas git add . $ doas git commit -m &amp;#39;create overlay&amp;#39; 复制想要bump的ebuild到你的overlay 这里以gentoo-zh的wps为例，当前gentoo-zh里wps的版本是11.</description></item><item><title>WM学习</title><link>https://liangyongxiang.github.io/p/wm%E5%AD%A6%E4%B9%A0/</link><pubDate>Fri, 01 Jan 2021 01:39:10 +0800</pubDate><guid>https://liangyongxiang.github.io/p/wm%E5%AD%A6%E4%B9%A0/</guid><description>TINYWM 我现在用的wm是dwm, 它是linux的一个极简的窗口管理器。基于C语言，大概只有2000行的代码。 不过它还不是最简单的窗口管理器。最简单的窗口管理器是tinywm: http://incise.org/tinywm.html。源码如下，我稍微整理一下格式：
/* TinyWM is written by Nick Welch &amp;lt;mack@incise.org&amp;gt;, 2005. * * This software is in the public domain * and is provided AS IS, with NO WARRANTY. */ #include &amp;lt;X11/Xlib.h&amp;gt; #define MAX(a, b) ((a) &amp;gt; (b) ? (a) : (b)) int main() { Display * dpy; Window root; XWindowAttributes attr; XButtonEvent start; XEvent ev; if(!(dpy = XOpenDisplay(0x0))) return 1; root = DefaultRootWindow(dpy); XGrabKey(dpy, XKeysymToKeycode(dpy, XStringToKeysym(&amp;#34;F1&amp;#34;)), Mod1Mask, root, True, GrabModeAsync, GrabModeAsync); XGrabButton(dpy, 1, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync, GrabModeAsync, None, None); XGrabButton(dpy, 3, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync, GrabModeAsync, None, None); for(;;) { XNextEvent(dpy, &amp;amp;ev); if(ev.</description></item></channel></rss>